@using WhereBNB.Client.Model
@using System.Text.Json
@using System.Reflection.Metadata
@inject IHttpClientFactory _clientFactory;

<div class="listing-details">
    <button type="button" class="btn btn-primary" onclick="@Back"><i class="bi bi-chevron-left"></i>Back</button>
    <h1>@Listing.Name</h1>
    <a href="@Listing.ListingUrl" target="_blank" rel="noopener noreferrer nofollow"><p>AirBNB Link</p></a>
    <a href="@Listing.HostUrl" target="_blank" rel="noopener noreferrer nofollow">
        <div class="details host-info">
            <img src="@Listing.HostPictureUrl" alt="Host picture"/>
            <p><strong>Host</strong><br/>@Listing.HostName</p>
        </div>
    </a>
    <div class="details text-center">
        <p><span class="enlarge">$@Listing.Price</span> per night</p>
    </div>
    <div class="details text-center">
        <p><span class="enlarge">@Stays</span> stays</p>
    </div>
    <div class="details text-center">
        <p><span class="enlarge">$@(Stays * Listing.Price)</span> income</p>
    </div>
    <AuthorizeView>
        <Authorized>
            @if (context.User.HasClaim(c => c.Type == "extension_Admin"))
            {
                <Graphs Listing="@Listing" />
            }
        </Authorized>
        <NotAuthorized>
            <p class="text-center">
                <a href="authentication/login">Log in</a> to see more stats!
            </p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter]
    public Listing Listing { get; set; }
    [Parameter]
    public Action Back { get; set; }
    private int Stays { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        var client = _clientFactory.CreateClient("api");
        Stays = await client.GetFromJsonAsync<int>($"stats/stays/{Listing.Id}");
    }

}