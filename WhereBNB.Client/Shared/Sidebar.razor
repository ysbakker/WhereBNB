@using WhereBNB.Client.Model
@inject IHttpClientFactory _clientFactory;
@inject IJSRuntime _jsRuntime;
@implements IDisposable;

<div class="sidebar">
    @if ((Listings != null && Listings.Count != 0) && !ShowDetails)
    {
    <div class="listings">
        @foreach (var listing in Listings)
        {
            <ListingCard Listing="@listing" Clicked="@HandleListingClicked" />
        }
    </div>
    <Pagination ChangePage="@HandleChangePage" MaxPage="@MaxPage" />
    }
    @if (ShowDetails && SelectedListing != null)
    {
        <ListingDetails Listing="@SelectedListing" Back="@HandleBack" />
    }
</div>


@code {
    private Func<int, Task> HandleChangePage { get; set; } = _ => Task.CompletedTask;
    private Action HandleBack { get; set; } = () => { };
    private Func<int, Task> HandleListingClicked { get; set; } = _ => Task.CompletedTask;
    
    private DotNetObjectReference<Sidebar> _objectReference;
    private List<SummaryListing> Listings { get; set; }
    private int MaxPage { get; set; }
    private readonly int _pageSize = 10;
    private bool ShowDetails { get; set; }
    private Listing SelectedListing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Listings = new List<SummaryListing>();
        var client = _clientFactory.CreateClient("api");
        var listingCount = await client.GetFromJsonAsync<double>("listings");
        MaxPage = (int)Math.Ceiling(listingCount / _pageSize);
        Listings = await client.GetFromJsonAsync<List<SummaryListing>>($"listings?page=1&pageSize={_pageSize}");
        HandleChangePage = async i =>
        {
            Console.WriteLine($"Changing page to {i}");
            Listings = await client.GetFromJsonAsync<List<SummaryListing>>($"listings?page={i}&pageSize={_pageSize}");
            StateHasChanged();
        };
        HandleBack = () =>
        {
            ShowDetails = false;
            StateHasChanged();
        };
        HandleListingClicked = async id =>
        {
            await PointClicked(id);
        };
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeVoidAsync("mapbox.init", _objectReference);
        }
    }

    [JSInvokable]
    public async Task PointClicked(int id)
    {
        var client = _clientFactory.CreateClient("api");
        var listing = await client.GetFromJsonAsync<Listing>($"listings/{id}");
        SelectedListing = listing;
        ShowDetails = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _objectReference.Dispose();
    }

}