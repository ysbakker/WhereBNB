@using WhereBNB.Client.Model
@inject IHttpClientFactory _clientFactory;
@inject IJSRuntime _jsRuntime;
@inject NavigationManager _navManager;
@implements IDisposable;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration _configuration;

<div class="sidebar">
    @if ((Listings != null && Listings.Count != 0) && !ShowDetails)
    {
        <p class="h4 cursor-pointer" data-toggle="collapse" href="#listing-filters">Filters <i class="bi bi-chevron-down"></i></p>
        <ListingFilters Parameters="@ListingParameters" HandleApplyFilter="@HandleApplyFilter" />
        <p class="h4">Results</p>
        <div class="listings">
            @foreach (var listing in Listings)
            {
                <ListingCard Listing="@listing" Clicked="@PointClicked" />
            }
        </div>
        <Pagination ChangePage="@HandleChangePage" MaxPage="@MaxPage" CurrentPage="@ListingParameters.Page.GetValueOrDefault(1)"/>
    }
    @if (ShowDetails && SelectedListing != null)
    {
        <ListingDetails Listing="@SelectedListing" Back="@HandleBack" />
    }
</div>


@code {
    private DotNetObjectReference<Sidebar> _objectReference;
    private List<SummaryListing> Listings { get; set; }
    private int MaxPage { get; set; }
    private readonly int _pageSize = 10;
    private bool ShowDetails { get; set; }
    private Listing SelectedListing { get; set; }
    private HttpClient Client { get; set; }
    private ListingParameters ListingParameters { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Listings = new List<SummaryListing>();
        Client = _clientFactory.CreateClient("api");
        var listingCount = await Client.GetFromJsonAsync<double>("listings");
        MaxPage = (int)Math.Ceiling(listingCount / _pageSize);
        Listings = await Client.GetFromJsonAsync<List<SummaryListing>>($"listings?page=1&pageSize={_pageSize}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _objectReference = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeVoidAsync("mapbox.init", _objectReference, $"{_configuration["ApiUrl"]}/listings?type=geojson");
        }
    }

    [JSInvokable]
    public async Task PointClicked(int id)
    {
        var listing = await Client.GetFromJsonAsync<Listing>($"listings/{id}");
        SelectedListing = listing;
        ShowDetails = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        _objectReference.Dispose();
    }
    
    private async Task HandleChangePage(int i)
    {
        ListingParameters.Page = i;
        Listings = await Client.GetFromJsonAsync<List<SummaryListing>>($"listings{CreateQueryString(ListingParameters)}");
        StateHasChanged();
    }

    private void HandleBack()
    {
        ShowDetails = false;
        StateHasChanged();
    }

    private async Task HandleApplyFilter(ListingParameters filters)
    {
        ListingParameters = filters;
        ListingParameters.Page = 1;
        var listingCount = await Client.GetFromJsonAsync<double>($"listings{CreateQueryString(ListingParameters, true)}");
        MaxPage = (int)Math.Ceiling(listingCount / _pageSize);
        Listings = await Client.GetFromJsonAsync<List<SummaryListing>>($"listings{CreateQueryString(filters)}");
        await _jsRuntime.InvokeVoidAsync("mapbox.updateData", $"{_configuration["ApiUrl"]}/listings{CreateQueryString(filters, true)}&type=geojson");

        StateHasChanged();
    }

    private string CreateQueryString(ListingParameters filters, bool getCount = false)
    {
        var query = $"?page={filters.Page.GetValueOrDefault(1)}";
        
        if (!getCount) query += $"&pageSize={filters.PageSize.GetValueOrDefault(_pageSize)}";
        
        if (!string.IsNullOrEmpty(filters.Neighbourhood)) query += $"&neighbourhood={filters.Neighbourhood}";
        if (filters.PriceFrom.HasValue && filters.PriceTo.HasValue) query += $"&priceFrom={filters.PriceFrom}&priceTo={filters.PriceTo}";
        if (filters.ReviewFrom.HasValue && filters.ReviewTo.HasValue) query += $"&reviewFrom={filters.ReviewFrom}&reviewTo={filters.ReviewTo}";

        return query;
    }
}